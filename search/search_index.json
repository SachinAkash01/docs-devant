{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is Devant?","text":"<p>Devant is a powerful IPaaS with first-class AI support. Incorporate AI agents into the integrations you build in low-code and pro-code, and move away from siloed systems to intelligent digital experiences with Devant by WSO2\u2014the AI iPaaS that your AI Agents can call \u201chome\u201d.</p>"},{"location":"#key-capabilities-of-devant","title":"Key capabilities of Devant","text":""},{"location":"#efficient-and-effective-development","title":"Efficient and effective development","text":"<ul> <li>AI-Assisted Development: Devant includes a developer friendly VSCode-based editor with an integrated AI copilot, which aids developers at every stage, from code generation to refactoring.</li> <li>Unified Low-Code and Pro-Code Development: Allows seamless transitions between low-code and pro-code development, accommodating a diverse range of developer skills and preferences.</li> <li>Comprehensive Protocol and AI Support: Built-in capabilities to integrate with third-party AI services, vector databases, and support for protocols such as TCP, UDP, FILE, Websub, and Websubhub.</li> <li>Developer-Centric Design: Tools and workflows tailored specifically for integration developers, enhancing debugging, testing, and issue identification.</li> <li>Git Repository Integration: Effortlessly connect to Git-based platforms like GitHub, Bitbucket, or GitLab to develop components by linking an existing repository.</li> </ul>"},{"location":"#seamless-deployment","title":"Seamless deployment","text":"<ul> <li>CI/CD: Eliminate manual builds and unreliable deployments with Devant's industry-standard CI/CD tooling, providing complete control and flexibility.</li> <li>Multi-Cloud Kubernetes: Easily deliver cloud-native applications across Azure, AWS, GCP, or your Kubernetes clusters.</li> <li>Configuration Management: Centralize configuration parameters, sensitive credentials, and secrets across deployment environments via an intuitive interface.</li> </ul>"},{"location":"#effortless-management-of-apis-integrations-microservices-and-web-applications","title":"Effortless management of APIs, integrations, microservices, and web applications","text":"<ul> <li>Enable Security: Empower security teams to manage data flows, ensuring seamless control over sensitive information like access credentials.</li> <li>Scale Up or Down: Kubernetes handles scaling automatically, optimizing costs by scaling services based on demand.</li> <li>Ensure Reliability: DevOps and SRE teams can easily manage deployed components with built-in insights and observability.</li> </ul>"},{"location":"#reusable-digital-assets","title":"Reusable digital assets","text":"<ul> <li>Control Visibility and Sharing: Publish your digital assets to a shared marketplace for consumption by internal or external stakeholders, managed by role-based access control.</li> <li>Internal Marketplace: Devant's secure internal marketplace fosters transparency and efficiency with granular access control for publishers and consumers.</li> </ul>"},{"location":"#comprehensive-observability","title":"Comprehensive observability","text":"<ul> <li>Anomaly Detection: Stay ahead of issues with prompt notifications, ensuring balanced scaling and immediate action during unexpected mishaps.</li> <li>Troubleshoot and Debug: Quickly pinpoint and address root causes using detailed logs and data aligned in the same timeline, down to the machine-level details.</li> </ul>"},{"location":"#robust-governance","title":"Robust governance","text":"<ul> <li>DORA Metrics: Monitor your DevOps efficiency with Devant DORA metrics, experiencing rapid improvements in time from deployment to production safely and robustly.</li> <li>Engineering Insights: Gain visibility into engineering insights and advanced data analytics to make data-driven decisions, optimize processes, and improve efficiency.</li> <li>API Analytics: Understand API performance and adoption patterns to identify and resolve operational bottlenecks.</li> </ul> <p>Devant is your all-in-one AI-capable platform for building, deploying, and managing integrations with ease, security, and efficiency.</p>"},{"location":"page-not-found/","title":"Page not found","text":"<p>Try one of the navigation links above or use the search engine in the top right corner.\u00a0</p>"},{"location":"rag-ingestion/","title":"RAG Ingestion","text":""},{"location":"rag-ingestion/#introduction","title":"Introduction","text":"<p>Retrieval-Augmented Generation (RAG) is an AI framework that enhances Large Language Model (LLM) accuracy by providing contextual data sources. To make use of RAG effectively, data must be systematically ingested into vector databases. This process, known as RAG Ingestion, involves setting up a vector database, utilizing embedding models, processing source files and chunking data. Devant offers a platform to efficiently ingest and manage unstructured documents for RAG. This guide walks through the key steps of RAG Ingestion in Devant.</p> <p>Go to your Organization by selecting the organization from the Organization dropdown in the top left corner. Select RAG Ingestion from the Admin dropdown at the bottom of the left navigation. </p>"},{"location":"rag-ingestion/#step-1-initialize-vector-store","title":"Step 1: Initialize Vector Store","text":"<p>LLMs receive contextual information as numerical vectors (embeddings). A vector database stores these embeddings for efficient retrieval. Devant supports a wide range of vector databases like Pinecone, Weaviate, Chroma, and so on. </p> <ol> <li>Select <code>Pinecone</code> as the vector database.</li> <li> <p>Enter the API key in the API Key field.</p> Info<p>To create an API key, refer to the Pinecone API Key documentation.</p> </li> <li> <p>Enter the Collection Name. The collection will be automatically created if it does not exist.</p> </li> <li>Click Next.</li> </ol>"},{"location":"rag-ingestion/#step-2-configure-the-embedding-model","title":"Step 2: Configure the Embedding Model","text":"<ol> <li>Select <code>text-embedding-ada-002</code> embedding model from the Open AI dropdown.</li> <li> <p>Enter the API key in the Embedding Model API Key field.</p> Info<p>To create an API key, refer to the OpenAI Platform documentation.</p> </li> <li> <p>Click Next.</p> </li> </ol>"},{"location":"rag-ingestion/#step-3-configure-chunking","title":"Step 3: Configure Chunking","text":"<p>Chunking is used to break large documents into manageable parts because processing them all at once is not feasible. Chunking strategy, Max segment size, and Max overlap size are automatically populated with default values. You can modify them if needed.</p> Info<ul> <li>Chunking strategy defines how text is split into smaller, manageable pieces (chunks).</li> <li>Max segment size determines the maximum length of tokens for each chunk.</li> <li>Max overlap size defines how many tokens repeat between consecutive chunks.</li> </ul>"},{"location":"rag-ingestion/#step-4-upload-source-files","title":"Step 4: Upload Source Files","text":"<p>Next, upload your source files (e.g., PDFs, CSVs, or text documents) for processing.</p> <ol> <li>Click Select Files. This will open the file explorer on your local machine.</li> <li>Select the files you want to upload.</li> <li> <p>Click Upload.</p> <p>Note</p> <p>When you click Upload it will generate embeddings for the uploaded files and store them in the vector database.</p> </li> </ol>"},{"location":"rag-ingestion/#step-5-verify","title":"Step 5: Verify","text":"<p>Once processing is complete, execute test queries to ensure proper data retrieval.</p> <ol> <li>Enter a query according to the content of the files uploaded in the previous step in the  Query field.</li> <li> <p>Maximum chunks to retrieve and Minimum similarity threshold are automatically populated with default values. You can modify them if needed.</p> Info<ul> <li>Maximum chunks to retrieve defines the number of matching chunks to retrieve against the query.</li> <li>Minimum similarity threshold determines whether a chunk is relevant enough to be considered a match for a given query. Expressed as a value between 0 and 1 (for example, 0.7 or 70% similarity).</li> </ul> </li> <li> <p>Click Retrieve. The search results will display the chunks that match the query.</p> </li> </ol> <p></p>"},{"location":"manage-databases-and-caches/add-devant-managed-databases-and-caches-to-the-marketplace/","title":"Add Devant-Managed Databases and Caches to the Marketplace","text":"<p>When you create a Devant-managed database or cache, you can add it to the Marketplace, making it available for consumption through a connection.</p> <p>Note</p> <p>To add a Devant-managed database or cache to the Marketplace, you must register at least one credential for it.</p>"},{"location":"manage-databases-and-caches/add-devant-managed-databases-and-caches-to-the-marketplace/#step-1-register-credentials","title":"Step 1: Register credentials","text":"<p>To register credentials, you can either use the default super admin credentials or the credentials you create using the super admin credentials. When you create a database or cache server, super admin credentials are generated by default. You can use these super admin credentials to create new user credentials. The steps to create new user credentials depend on the type of database or cache you are using.</p> <p>You can use the registered credentials to create a connection. During connection setup, you must select credentials for each database from the list of available credentials.</p> <p>To register credentials for a database, follow these steps:</p> <ol> <li>Sign in to the Devant Console.</li> <li>Go to the Devant Console header and select your organization from the Organization list.</li> <li>In the left navigation menu, click Dependencies and then click Databases.</li> <li>Click on a required database to view its details.</li> <li>Click the Databases tab.</li> <li>Click to expand the database for which you want to register credentials, then click Add Credentials.</li> <li> <p>In the Add Credentials dialog, do one of the following depending on your requirements:</p> <ul> <li>Select Add New Credentials and specify the following:<ul> <li>A display name for the credentials.</li> <li>The database credentials you created to use when setting up database connections in Devant.</li> <li>The environment where you want to use the credentials.</li> </ul> </li> </ul> <p>The steps to create new user credentials depend on the type of database or cache you are using. In general, you must log in to your database server as the super admin using a command-line interface or a database management tool. Then, create new database users with the required permission levels.</p> <ul> <li>Select Add Super Admin Credentials and specify the following:<ul> <li>A display name for the credentials.</li> <li>The environment where you want to use the credentials.</li> </ul> </li> </ul> </li> <li> <p>Click Save.</p> </li> </ol> <p>Tip</p> <p>Devant allows you to delete registered credentials to prevent their use when establishing new connections. However, deleting credentials will not affect any existing database connections that are already using them.</p>"},{"location":"manage-databases-and-caches/add-devant-managed-databases-and-caches-to-the-marketplace/#step-2-add-the-database-or-cache-to-the-marketplace","title":"Step 2: Add the database or cache to the Marketplace","text":"<ul> <li>On the Databases tab, click +Add to Marketplace corresponding to the database you want to add.</li> </ul> <p>Once the database is added to the Marketplace, it can be consumed via a connection. For details on creating a connection to a Devant-managed database, see Create a connection to a database.</p> <p>Note</p> <p>To remove a database or cache that you added to the Marketplace, click the corresponding Remove from Marketplace. This action prevents new connections to the removed database, but existing connections remain unaffected.</p> <p>For details on using a database connection in your component, see Use a Database Connection in Your Component.</p>"},{"location":"manage-databases-and-caches/devant-managed-caches/","title":"Devant-Managed Cache","text":"<p>Fully compatible with legacy Redis\u00ae OSS.</p> <p>Devant-Managed Cache provides fully-managed in-memory NoSQL databases on AWS, Azure, GCP, and Digital Ocean and can be used as a cache, database, streaming engine, or message broker.</p>"},{"location":"manage-databases-and-caches/devant-managed-caches/#create-a-devant-managed-cache","title":"Create a Devant-Managed Cache","text":"<p>Follow the steps below to create a Devant-Managed Cache:</p> <ol> <li>Sign in to the Devant Console at https://console.devant.dev/.</li> <li>In the header, click the Organization list. This opens the organization home page.</li> <li>In the left navigation menu, click Dependencies and then click Databases.</li> <li>Click + Create and select Devant-Managed Cache as the data store type. Provide a display name for this server and follow the instructions.</li> <li>Select a preferred cloud provider (AWS, Azure, GCP, or Digital Ocean).<ul> <li>The cloud provider provisions the compute and storage infrastructure for your data store.</li> <li>The functionality remains the same across cloud providers, though service plans and costs may differ.</li> </ul> </li> <li>Select a region for your data store.<ul> <li>Available regions depend on the selected cloud provider. Devant currently supports US and EU regions across all providers.</li> </ul> </li> <li>Select a service plan.<ul> <li>Service plans vary in terms of dedicated CPU, memory (RAM), and storage space allocated for your data store, as well as high-availability configurations for production use cases.</li> </ul> </li> <li>Click Create.</li> </ol>"},{"location":"manage-databases-and-caches/devant-managed-caches/#connect-to-your-devant-managed-cache","title":"Connect to your Devant-Managed Cache","text":"<p>To connect to your Devant-Managed Cache, follow these guidelines:</p> <ul> <li>Use any legacy Redis\u00ae OSS compatible driver (in any programming language) to connect to your Devant-Managed Cache.</li> <li>You can find the connection parameters in the Overview section in the Devant Console under the relevant database. Note that Devant-Managed Cache enforces TLS.</li> <li>Devant-Managed Cache instances accept traffic from the internet by default. You can restrict access to specific IP addresses and CIDR blocks under Advanced Settings.</li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-caches/#high-availability-and-automatic-backups","title":"High availability and automatic backups","text":"<p>The high availability and the automatic backup retention periods for a Devant-Managed Cache can vary as follows depending on the service plan you select.</p> Service plan High availability Backup features Backup history Hobbyist Single-node with limited availability. Single backup only for disaster recovery None Startup Single-node with limited availability. Single backup only for disaster recovery 1 day Business Two-node (primary + standby) with higher availability (automatic failover if the primary node fails). Automatic backups 3 days Premium Three-node (primary + standby + standby) with highest availability (automatic failover if the primary node fails). Automatic backups 13 days <p>In general, service plans are recommended for production scenarios due to the following reasons:</p> <ul> <li>Provides another physical copy of the data in case of hardware, software, or network failures.</li> <li>Reduces the data loss window in disaster scenarios.</li> <li>Ensures quicker restoration with controlled failover in case of failures, as the standby is already installed and running.</li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-caches/#automatic-backups","title":"Automatic backups","text":"<ul> <li>Devant runs full backups daily to automatically backup Devant-Managed Caches and has write-ahead logs (WAL) copied at 5-minute intervals or for every new file generated.</li> <li>Devant encrypts all backups at rest.</li> <li>Devant automatically handles outages and software failures by replacing broken nodes with new ones that resume correctly from the point of failure. The impact of a failure will depend on the number of available standby nodes in the data store.</li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-caches/#failure-recovery","title":"Failure recovery","text":"<ul> <li> <p>Minor failures: Devant automatically handles minor failures such as service process crashes or temporary loss of network access in all plans without requiring significant changes to the service deployment. Devant automatically restores the service to normal operation once it automatically restarts the crashed process or when it restores the network access.</p> </li> <li> <p>Severe failures: Failures such as losing a node entirely in case of hardware or severe software problems, require more drastic recovery measures. The monitoring infrastructure automatically detects a failing node when the node starts reporting issues in the self-diagnostics or when it stops communicating. In such cases, the monitoring infrastructure automatically schedules a new replacement node to be created.</p> <ul> <li>In the event of a data store failover, the service URI of your service remains the same; only the IP address will change to point to the new primary node.</li> <li>Hobbyist and Startup plans provide a single node, and in case of failure, a new node starts up, restores its state from the latest available backup, and resumes serving traffic.</li> <li>As there is just a single/primary node, the caching service becomes unavailable for the duration of the restoration operation. Therefore, all write operations made since the last backup will be lost.</li> </ul> </li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-caches/#limitations","title":"Limitations","text":""},{"location":"manage-databases-and-caches/devant-managed-caches/#connection-limits","title":"Connection limits","text":"<p>The number of simultaneous connections in a Devant-Managed Cache depends on the total available memory on the server instances.</p> <p>You can use the following to estimate:</p> <pre><code>max_number_of_connections = 4 x m\n</code></pre> <p>Here, <code>m</code> represents the memory in megabytes, where at least 10,000 connections are available, even on the smallest servers. For example, on a server with 4GB memory (4,096 MB), the simultaneous connections are:</p> <pre><code>4 x 4096 = 16384 // 16k connections\n</code></pre> <p>This number is estimated by the exact available memory so it can vary between different plans and cloud providers. To see the exact maximum connections allowed, use the * redis-cli and info command as follows:</p> <pre><code>echo \"info\" | redis-cli -u REDIS_URI | grep maxclients\n</code></pre>"},{"location":"manage-databases-and-caches/devant-managed-caches/#restricted-commands","title":"Restricted commands","text":"<p>To maintain the stability and security of a managed environment, Devant restricts certain commands on Devant-Managed Cache services.</p> <p>Support for Lua scripts on Devant-Managed Cache</p> <ul> <li>Devant-Managed Cache has built-in support for running Lua scripts to perform various actions directly on the server. Scripting is typically controlled using the <code>EVAL</code>, <code>EVALSHA</code>, and <code>SCRIPT LOAD</code> commands.</li> <li>For all newly-created cache instances, <code>EVAL</code>, <code>EVALSHA</code>, and <code>SCRIPT LOAD</code> commands are enabled by default.</li> </ul> <p>The following commands are disabled on Devant:</p> <ul> <li><code>bgrewriteaof</code>: Initiates a background append-only file rewrite.</li> <li><code>cluster</code>: Manages Caching cluster commands.</li> <li><code>command</code>: Provides details about all Caching commands.</li> <li><code>debug</code>: Contains sub-commands for debugging Caching.</li> <li><code>failover</code>: Manages manual failover of a master to a replica.</li> <li><code>migrate</code>: Atomically transfers a key from one caching instance to another.</li> <li><code>role</code>: Returns the role of the instance in the context of replication.</li> <li><code>slaveof</code>: Makes the server a replica of another instance, or promotes it as master.</li> <li><code>acl</code>: Manages caching access control lists.</li> <li><code>bgsave</code>: Creates a snapshot of the data set into a dump file.</li> <li><code>config</code>: Alters the configuration of a running caching server.</li> <li><code>lastsave</code>: Returns the UNIX timestamp of the last successful save to disk.</li> <li><code>monitor</code>: Streams back every command processed by the Caching server.</li> <li><code>replicaof</code>: Makes the server a replica of another instance.</li> <li><code>save</code>: Synchronously saves the dataset to disk.</li> <li><code>shutdown</code>: Synchronously saves the dataset to disk and then shuts down the server.</li> </ul> <p>The following <code>eval</code> commands are also disabled:</p> <ul> <li><code>eval</code>: Executes a Lua script server-side.</li> <li><code>eval_ro</code>: Read-only variant of the eval command.</li> <li><code>evalsha</code>: Executes a script cached on the server side by its SHA1 digest.</li> <li><code>evalsha_ro</code>: Read-only variant of the evalsha command.</li> <li><code>fcall</code>: Calls a Caching function.</li> <li><code>fcall_ro</code>: Read-only variant of the fcall command.</li> <li><code>function</code>: Manages Caching functions.</li> <li><code>script</code>: Manages the script cache.</li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-databases-and-caches/","title":"Devant-Managed Databases, Vector Databases, and Caches","text":"<p>Devant allows you to create PostgreSQL and MySQL databases as well as Devant-Managed Cache instances on all major cloud providers (AWS, Azure, GCP, and DigitalOcean) as fully Devant-managed platform services. These databases and caches can be seamlessly provisioned to offer persistence and caching capabilities for all your Devant components. Devant provides various service plans for each type, ranging from smaller instances for development purposes to production-grade databases with automatic backups and high-availability multi-nodes.</p> <p>Note</p> <ul> <li>The capability to create Devant-managed databases, vector databases, and cache services is available only for paid Devant users.</li> <li>Billing for these services will be included in your Devant subscription, with pricing varying based on the service plan of the resources you create. For more details, see Devant Platform Services Billing.</li> </ul> <p>Explore the free trial</p> <p>Devant provides a 7-day free trial for all database types on the 'Hobbyist' service plan, available to free-tier users.</p>"},{"location":"manage-databases-and-caches/devant-managed-databases-and-caches/#postgresql-on-devant","title":"PostgreSQL on Devant","text":"<p>PostgreSQL (also known as Postgres), is an open-source object-relational database management system. You can create PostgreSQL databases on Devant as fully Devant-managed, flexible SQL databases that are ideal for both structured and unstructured data. If you want to perform an efficient vector similarity search, you can create a PostgreSQL vector database.</p> <ul> <li>Create a PostgreSQL database on Devant</li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-databases-and-caches/#mysql-on-devant","title":"MySQL on Devant","text":"<p>MySQL is a user-friendly, flexible, open-source relational database management system with a well-established history in the SQL database realm. Devant allows you to swiftly create fully Devant-managed MySQL databases, enabling rapid setup and utilization.</p> <ul> <li>Create a MySQL database on Devant</li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-databases-and-caches/#devant-managed-cache","title":"Devant-Managed Cache","text":"<p>A fully-managed cache compatible with legacy Redis\u00ae OSS. A versatile, in-memory NoSQL database that serves as a cache, database, streaming engine, and message broker. Devant-managed Cache allows you to have fully-managed instances that can be swiftly provisioned and integrated into your applications within minutes.</p> <ul> <li>Create a Devant-managed Cache</li> </ul> <p>  PostgreSQL, MySQL, and Redis\u00ae are trademarks and property of their respective owners. All product and service names used in this documentation are for identification purposes only.  </p>"},{"location":"manage-databases-and-caches/devant-managed-mysql-databases/","title":"Devant-managed MySQL Databases","text":"<p>MySQL on Devant offers fully managed, flexible relational databases on AWS, Azure, GCP, and Digital Ocean.</p>"},{"location":"manage-databases-and-caches/devant-managed-mysql-databases/#create-a-devant-managed-mysql-database","title":"Create a Devant-managed MySQL database","text":"<p>Follow the steps below to create a Devant-managed MySQL database:</p> <ol> <li>From the environment list on the header, located next to the Deployment Tracks list, select your Organization.</li> <li>In the left navigation menu, click Dependencies and then Databases.</li> <li>Click Create and select MySQL as the database type. Provide a display name for this server and follow the instructions.</li> <li>Select your preferred cloud provider from AWS, Azure, GCP, and Digital Ocean.</li> <li>Devant uses the cloud provider to provision the compute and storage infrastructure for your database.</li> <li>There is no functional difference between databases created on different cloud providers, apart from changes to service plans (and associated costs).</li> <li>Choose the region for your database.</li> <li>Available regions will depend on the selected cloud provider. Devant currently supports US and EU regions across all providers.</li> <li>Select the service plan.</li> <li>Service plans vary in the dedicated CPU, memory (RAM), storage space allocated for your database, the backup retention periods, and high-availability configurations for production use cases.</li> </ol>"},{"location":"manage-databases-and-caches/devant-managed-mysql-databases/#connect-to-your-devant-managed-mysql-database","title":"Connect to your Devant-managed MySQL database","text":"<p>To connect to your Devant-managed MySQL database, consider the following guidelines:</p> <ul> <li>You can use any MySQL driver, ORM, or supported generic SQL library (may depend on the programming language) to connect to the database.</li> <li>You can find the connection parameters in the Overview section in the Devant Console under the relevant database.</li> <li>MySQL databases accept traffic from the internet by default. You can restrict access to specific IP addresses and CIDR blocks under Advanced Settings.</li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-mysql-databases/#high-availability-and-automatic-backups","title":"High Availability and Automatic Backups","text":"<p>The high availability characteristics and the automatic backup retention periods for Devant-managed MySQL databases vary based on your service plan as explained below:</p> Service Plan High Availability Backup Retention Time Hobbyist Single-node with limited availability None Startup Single-node with limited availability 2 days Business Two-node (primary + standby) with higher availability 14 days Premium Three-node (primary + standby + standby) with highest availability 30 days <p>In general, we recommend service plans for production scenarios for multiple reasons: - Provides another physical copy of the data in case of hardware, software, or network failures. - Typically reduces the data loss window in disaster scenarios. - Provides a quicker time to restore with a controlled failover in case of failures, as the standby is already installed and running.</p>"},{"location":"manage-databases-and-caches/devant-managed-mysql-databases/#automatic-backups","title":"Automatic Backups","text":"<ul> <li> <p>Devant runs full backups daily to automatically back up Devant-managed MySQL databases and record binary logs continuously.   Devant encrypts all backups at rest.</p> </li> <li> <p>Devant automatically handles outages and software failures by replacing broken nodes with new ones that resume correctly from the point of failure. The impact of a failure will depend on the number of available standby nodes in the database.</p> </li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-mysql-databases/#connection-limits","title":"Connection Limits","text":"<p>The maximum number of simultaneous connections to MySQL databases is fixed for each service plan and depends on how much RAM your service plan offers.</p> <p>Note</p> <p>An <code>extra_connection</code> with a value of <code>1</code> is added for system processes for all MySQL databases, regardless of the service plan.</p>"},{"location":"manage-databases-and-caches/devant-managed-mysql-databases/#for-plans-under-4-gib-ram","title":"For plans under 4 GiB RAM","text":"<p>For plans under 4 GiB of RAM, the number of allowed connections is <code>75</code> per GiB:</p> <pre><code>max_connections = 75 x RAM + extra_connection\n</code></pre>"},{"location":"manage-databases-and-caches/devant-managed-mysql-databases/#for-plans-with-over-4-gib-ram","title":"For plans with over 4 GiB RAM:","text":"<p>For plans with 4 GiB or more RAM, the number of allowed connections is <code>100</code> per GiB:</p> <pre><code>max_connections = 100 x RAM + extra_connection\n</code></pre>"},{"location":"manage-databases-and-caches/devant-managed-postgresql-databases/","title":"Devant-Managed PostgreSQL Databases and Vector Databases","text":"<p>PostgreSQL on Devant offers fully Devant-managed, efficient object-relational databases on AWS, Azure, GCP, and Digital Ocean. Additionally, Devant allows you to create fully-managed PostgreSQL vector databases if you want to perform efficient vector similarity search.</p>"},{"location":"manage-databases-and-caches/devant-managed-postgresql-databases/#create-a-devant-managed-postgresql-database","title":"Create a Devant-managed PostgreSQL database","text":"<p>Follow the steps below to create a Devant-managed PostgreSQL database:</p> <ol> <li>Sign in to the Devant Console at https://console.devant.dev/.</li> <li>In the header, click the Organization list. This opens the organization home page.</li> <li>In the left navigation menu, click Dependencies and then Databases.</li> <li>Click Create and select PostgreSQL as the database type. Provide a display name for this server and follow the instructions.</li> <li>Select your preferred cloud provider from AWS, Azure, GCP, or Digital Ocean.<ul> <li>The cloud provider is used to provision the compute and storage infrastructure for your database.</li> <li>There is no functional difference between databases created on different cloud providers, apart from changes to service plans (and associated costs).</li> </ul> </li> <li>Choose the region for your database.<ul> <li>Available regions will depend on the selected cloud provider. Devant currently supports US and EU regions across all providers.</li> </ul> </li> <li>Select the service plan.<ul> <li>Service plans vary in the dedicated CPU, memory (RAM), storage space allocated for your database, the backup retention periods, and high-availability configurations for production use cases.</li> </ul> </li> </ol>"},{"location":"manage-databases-and-caches/devant-managed-postgresql-databases/#create-a-devant-managed-postgresql-vector-database","title":"Create a Devant-managed PostgreSQL vector database","text":"<p>Follow the steps below to create a Devant-managed PostgreSQL vector database:</p> <ol> <li>Sign in to the Devant Console at https://console.devant.dev/.</li> <li>In the header, click the Organization list. This opens the organization home page.</li> <li>In the left navigation menu, click Dependencies and then Vector\u00a0Databases.</li> <li>Follow steps 4 onwards in the Create a Devant-managed PostgreSQL database section.</li> </ol>"},{"location":"manage-databases-and-caches/devant-managed-postgresql-databases/#connecting-to-your-devant-managed-postgresql-database","title":"Connecting to your Devant-managed PostgreSQL database","text":"<p>To connect to your Devant-managed PostgreSQL database, consider the following guidelines:</p> <ul> <li>You can use any PostgreSQL driver, ORM, or supported generic SQL library (may depend on the programming language) to connect to the database.</li> <li>The connection parameters can be found in the Overview section in the Devant Console under the relevant database.</li> <li>PostgreSQL databases accept traffic from the internet by default. You can restrict access to specific IP addresses and CIDR blocks under Advanced Settings.</li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-postgresql-databases/#high-availability-and-automatic-backups","title":"High Availability and Automatic Backups","text":"<p>The high availability characteristics and the automatic backup retention periods for Devant-managed PostgreSQL databases vary based on the selected service plan as shown below.</p> Service Plan High Availability Backup Retention Time Hobbyist Single-node with limited availability None Startup Single-node with limited availability 2 days Business Two-node (primary + standby) with higher availability 14 days Premium Three-node (primary + standby + standby) with highest availability 30 days <p>Service plans with standby nodes are generally recommended for production scenarios for multiple reasons: - Provides another physical copy of the data in case of hardware, software, or network failures. - Typically reduces the data loss window in disaster scenarios. - Provides a quicker time to restore with a controlled failover in case of failures, as the standby is already installed and running.</p>"},{"location":"manage-databases-and-caches/devant-managed-postgresql-databases/#automatic-backups","title":"Automatic Backups","text":"<ul> <li> <p>Devant runs full backups daily to automatically back up Devant-managed PostgreSQL databases and copies the write-ahead logs (WAL)  at 5-minute intervals or for every new file generated.   Devant encrypts all backups at rest.</p> </li> <li> <p>Devant automatically handles outages and software failures by replacing broken nodes with new ones that resume correctly from the point of failure. The impact of a failure will depend on the number of available standby nodes in the database.</p> </li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-postgresql-databases/#failure-recovery","title":"Failure Recovery","text":"<ul> <li> <p>Minor failures: Devant automatically handles minor failures such as service process crashes or temporary loss of network access in all plans without requiring significant changes to the service deployment. Devant automatically restores the service to normal operation once Devant automatically restarts the crashed process or when Devant restores the network access.</p> </li> <li> <p>Severe failures: To handle severe failures such as losing a node entirely in case of hardware or severe software problems, requires more drastic recovery measures. The monitoring infrastructure automatically detects a failing node, both when the node starts reporting issues in the self-diagnostics or when it stops communicating. In such cases, the monitoring infrastructure automatically schedules a new replacement node to be created.</p> <ul> <li>In the event of database failover, the Service URI of your service remains the same; only the IP address will change to point to the new primary node.</li> <li>Hobbyist and Startup plan provide a single node, and in case of failure, a new node starts up, restores its state from the latest available backup, and resumes serving traffic.     In this plan, as there is just a single node providing the service, the service will become unavailable for the duration of the restoration. In addition, any write operations made since the backup of the latest WAL file will be lost. Typically, this time window is limited to either five minutes of time or one WAL file.</li> </ul> </li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-postgresql-databases/#connection-limits","title":"Connection limits","text":"<p>The following connection limits apply to Devant-managed PostgreSQL databases based on the selected service plan.</p> Service Plan Max Connections Hobbyist 25 Startup/Business/Premium-4 100 Business-16 400 Premium-8 200"},{"location":"quick-start-guides/schedule-your-first-automation/","title":"Schedule Your First Automation","text":""},{"location":"quick-start-guides/schedule-your-first-automation/#overview","title":"Overview","text":"<p>In this guide, you will:</p> <ul> <li>Create a simple automation that prints <code>\"Hello World\"</code> every day.</li> <li>Use Ballerina Integrator to develop the automation.</li> <li>Push the automation to Devant from the Ballerina Integrator which automatically builds the automation.</li> <li>Schedule the automation to run every day.</li> </ul>"},{"location":"quick-start-guides/schedule-your-first-automation/#prerequisites","title":"Prerequisites","text":"<ol> <li>GitHub account: Create a GitHub account if you don't have one already.</li> <li>If signing in to Devant for the first time, create an organization:<ol> <li>Go to https://console.devant.dev/ and sign in using Google, GitHub, or Microsoft account.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use and click Create.</li> </ol> </li> <li>VSCode: Install VSCode if you don't have it installed already.</li> </ol>"},{"location":"quick-start-guides/schedule-your-first-automation/#step-1-attach-a-git-repository","title":"Step 1: Attach a Git repository","text":"<ol> <li>Go to https://console.devant.dev/ and sign in. This opens the organization overview page and lists the projects.</li> <li>Select the Default project.</li> <li>On the project overview page, click Attach a Git Repository.</li> <li>Click Authorize with GitHub to connect Devant to your GitHub account. If you haven't connected your GitHub repository to Devant, authorize the WSO2 cloud app stage with your GitHub account WSO2 Cloud App.</li> <li>Under the Organization dropdown, click + Add. This redirects you to the Install WSO2 Cloud App Stage page.</li> <li> <p>Select your GitHub account and install WSO2 Cloud App</p> <p>Note</p> <p>The WSO2 Cloud App requires: - Read and write access to code and pull requests. - Read access to issues and metadata.</p> <p>You can revoke access at any time. Write access is used to push changes directly to your repository.</p> </li> <li> <p>Select your organization under the Organization dropdown. If your organization is not listed, click the Refetch button.</p> </li> <li>Select a repository to save your automation. Optionally, you may select a Branch and a Path of the selected repository to save your automation.</li> <li>The Name and Identifier fields are automatically populated. Optionally, you can edit them to your preference.</li> <li>Select the Technology as <code>Ballerina</code>.</li> <li>Choose the Integration Type as <code>Automation</code> and click Create.</li> </ol> <p>This redirects you to the overview page of the automation. Now, let's design the automation.</p>"},{"location":"quick-start-guides/schedule-your-first-automation/#step-2-install-the-ballerina-integrator-extension","title":"Step 2: Install the Ballerina Integrator extension","text":"<ol> <li>Click Install Ballerina Integrator extension on the overview page. This opens the VSCode extensions page.</li> <li>Click Install to install the extension. This installs both Ballerina Integrator and Ballerina extensions on VSCode.</li> </ol>"},{"location":"quick-start-guides/schedule-your-first-automation/#step-3-set-up-ballerina-integrator-for-the-first-time","title":"Step 3: Set up Ballerina Integrator for the first time","text":"<ol> <li>Click the Ballerina Integrator icon on the sidebar.    </li> <li>Click <code>Set Up Ballerina Integrator</code>. The setup wizard installs and configures the Ballerina distribution required for the Ballerina Integrator.</li> <li>Click <code>Restart VS Code</code> to complete the setup.    </li> </ol> Update Ballerina Integrator's Ballerina Distribution<p>The setup wizard installs the Ballerina distribution required for the Ballerina Integrator into the <code>&lt;USER_HOME&gt;/.ballerina/ballerina-home</code> directory. Press <code>Ctrl + Shift + P</code> on Windows and Linux, or <code>Shift + \u2318 + P</code> on a Mac and type <code>Ballerina: Update Ballerina Integrator</code> to update the installed Ballerina distribution.</p>"},{"location":"quick-start-guides/schedule-your-first-automation/#step-4-develop-automation-in-vscode","title":"Step 4: Develop automation in VSCode","text":"<ol> <li>Click Develop automation in VSCode in the automation overview page. This opens your project in VSCode. </li> <li>Click the Ballerina Integrator icon on the sidebar. </li> <li>Click Create New Integration and enter the Integration Name as <code>HelloWorld</code>.</li> <li>The project directory should be automatically populated. If not, select the project directory by clicking the Select Location button.</li> <li>Click Create Integration to create the integration project.    </li> <li>In the design view, click Add Construct.</li> <li>Select Automation from the Constructs menu.</li> <li>Click Create to create an automation. This directs you to the automation diagram view.</li> <li>Click + after the Start node to open the node panel.</li> <li>Select Function Call and select println.</li> <li>Click + Add Another Value, type <code>\"Hello World\"</code> and click Save.</li> <li>Click Run in the top right corner to run the automation. This compiles the automation and runs it in the embedded Ballerina runtime.    </li> </ol>"},{"location":"quick-start-guides/schedule-your-first-automation/#step-5-push-to-devant","title":"Step 5: Push to Devant","text":"<ol> <li>Click the Source Control icon on the sidebar.</li> <li>Click + to stage all changes.</li> <li>Add an appropriate commit message and commit.</li> <li>Click Sync Changes to push the changes to remote.</li> </ol>"},{"location":"quick-start-guides/schedule-your-first-automation/#step-6-schedule-automation","title":"Step 6: Schedule Automation","text":"<ol> <li> <p>Once you push the changes, the overview page of the Devant automation will automatically refresh and show you the Latest Commit and automatically build your automation showing the Build Status.</p> <p>Note</p> <p>The build process may take some time. Once complete, the build status changes to Success. You can see the Build History by clicking Build in the left navigation.</p> </li> <li> <p>Once the Build Status shows <code>Build completed</code>, click Test to run your automation once.</p> </li> <li>The development card automatically updates with execution details. Click the refresh button in the top right corner if it is not automatically updated.</li> <li>Click View Logs on an execution. You will see the <code>Hello World</code> log printed along with the execution time.</li> <li>Click Schedule to schedule the automation.</li> <li>In the BY INTERVAL tab, select Day from the dropdown.</li> <li>Enter <code>1</code> in the Repeat every text box.</li> <li>Enter <code>01:00 AM</code> in the At text box and click Update.</li> <li>Your automation will now run every day at 01:00 AM. You can see the next execution time as Next run in in the Development card.    </li> </ol>"},{"location":"sharing-and-reusing/create-a-connection/","title":"Create a Connection","text":"<p>Using Connections, you can connect the integration with other APIs on Devant or external services. It also allows you to create connections to any Devant-managed database.</p> <p>To create a connection to an API or a database, follow the step-by-step instructions in the respective tab:</p> Create a connection to an APICreate a connection to a database <p>Create a connection to a Devant service</p> <p>Follow these steps to create a connection to an API deployed in Devant:</p> <ol> <li> <p>In the Devant Console, go to the top navigation menu and set the visibility level as project or integration as follows: </p> <ul> <li>Project Connection: Select an organization and a project in that organization. </li> <li>Integration Connection: Select an organization, a project in that organization, and an integration in the selected project. </li> </ul> </li> <li> <p>In the left navigation menu, click Admin and then Connections. This page lists all the existing connections.</p> </li> <li>Click the Services card and the resource page will open. You can search and apply filters to efficiently find a service.</li> <li>Click on the service you want to connect to. </li> <li>Enter a name and a description for the connection.</li> <li>Select an Access Mode and Authentication Scheme for the connection.</li> <li>Click Create.</li> </ol> <p>This creates the connection and displays its details for each environment, along with an inline guide on how to use the connection in your component. </p> <p>Note</p> <p>During connection creation, secret values for the lowest environment are visible, allowing you to copy them for local use if necessary. Secret values for higher environments remain hidden to ensure security.</p> <p>Create a connection to an external service</p> <p>Follow these steps to create a connection to an external service:</p> <ol> <li>In the left navigation menu, click Admin and then Third Party Services. This page lists all the existing third-party services.</li> <li>Click +Register. This opens the Register a Third Party Service window.</li> <li>Enter the Name, Version, and Summary.</li> <li>Select a the Service Definition file to upload.</li> <li>Select a the Service Type from the dropdown.</li> <li>Click Define Endpoints.</li> <li>Add endpoints to your requirement and click Register.</li> </ol> <p>For step-by-step instructions on using a connection in your integration, see Use a Connection in Your Integration.</p> <p>Prerequisites:</p> <ul> <li>Create a Devant-managed database. For details, see Devant-Managed Databases and Caches.</li> <li>Add the database to the Marketplace. For details, see Add Devant-Managed Databases and Caches to the Marketplace.</li> </ul> <p>Follow these steps to create a connection to a Devant-managed database:</p> <ol> <li> <p>In the Devant Console, go to the top navigation menu and set the visibility level as project or component as follows: </p> <ul> <li>Project Connection: Select an organization and a project in that organization. </li> <li>Component Connection: Select an organization, a project in that organization, and a component in the selected project. </li> </ul> </li> <li> <p>In the left navigation menu, click Dependencies  and then Connections. This page lists all the existing connections.</p> </li> <li>Click +Create. This opens the Marketplace view where you can browse and search for services or databases.</li> <li>Click the Databases tab. You can search and apply filters to efficiently find a database.</li> <li>Click on the database you want to connect to. </li> <li> <p>To create the connection, follow these steps:</p> <ol> <li>Enter a name and description.</li> <li> <p>Under Environment Configuration, select credentials for each environment.</p> <p>Note</p> <p>By default, the selected database is applied to all environments. To use different databases for specific environments, select the appropriate database and provide the corresponding credentials for each environment.</p> </li> <li> <p>Click Create.  </p> </li> </ol> </li> </ol> <p>This creates the connection and displays the database connection details for each environment, along with an inline guide on how to use the connection in your component. </p> <p>Note</p> <p>During connection creation, secret values for the lowest environment are visible, allowing you to copy them for local use if necessary. Secret values for higher environments remain hidden to ensure security.</p> <p>For step-by-step instructions on using a database in your component, see Use a Database Connection in Your Component.</p>"},{"location":"sharing-and-reusing/use-a-connection-in-your-integration/","title":"Use a Connection in Your Service","text":"<p>Devant allows you to share and reuse your services, accelerating development and enhancing efficiency in building integrated applications through connections.</p> <p>For step-by-step on instruction on creating a connection, see Create a Connection.</p> <p>To learn more about Devant Connections, see the documentation on Connections.</p>"},{"location":"sharing-and-reusing/use-a-connection-in-your-integration/#consume-a-service-through-a-connection","title":"Consume a service through a connection","text":"<p>You can consume a Devant-deployed service within another service. Consuming connections from within Devant services is seamless and straightforward. Follow the steps below to consume a Devant service:</p>"},{"location":"sharing-and-reusing/use-a-connection-in-your-integration/#step-1-add-connection-configurations","title":"Step 1: Add connection configurations Step 2: Read configurations within the application  Step 2: Read configurations within the application","text":"<p>To integrate another service into your application, click the appropriate tab below based on your current configuration file and follow the step-by-step instructions:</p> Component.yaml file (v1.1)Component.yaml file (v1.0)Component-config.yaml file <ol> <li> <p>Copy and paste the snippet from the in-line developer guide into the <code>component.yaml</code> file.</p> <p>The following is a sample snippet: </p> <pre><code>dependencies:\nconnectionReferences:\n- name: &lt;CONNECTION_NAME&gt;\nresourceRef: &lt;RESOURCE_IDENTIFIER&gt;\n</code></pre> Field Description name The name given to the connection. resourceRef A unique, readable identifier of the service being connected to. </li> <li> <p>If you've previously added a <code>connectionReferences</code> section under <code>dependencies</code>, append this as another item under <code>connectionReferences</code>. Upon deploying the component, Devant automatically creates a subscription if applicable and the necessary configurations to establish the connection will be injected into the Devant-defined environment variables.</p> <p>The following table details the Devant-defined environment variables:</p> Configuration Key Devant-Defined Environment Variable Name ServiceURL Devant_&lt;CONNECTION_NAME&gt;_SERVICEURL ConsumerKey Devant_&lt;CONNECTION_NAME&gt;_CONSUMERKEY ConsumerSecret Devant_&lt;CONNECTION_NAME&gt;_CONSUMERSECRET TokenURL Devant_&lt;CONNECTION_NAME&gt;_TOKENURL DevantAPIKey Devant_&lt;CONNECTION_NAME&gt;DevantAPIKEY <p>If you want to use custom environment variable names instead of the Devant-defined ones, you must define the environment configurations under the <code>configuration</code> section in the same file.   The following is a sample snippet: </p> <pre><code>configuration:\nenv:\n- name: HR_SERVICE_URL\nvalueFrom:\nconnectionRef:\nname: hr-connection\nkey: ServiceURL\n</code></pre> <p>The following table provides details on the configuration keys associated with the connection. These keys can be referenced as <code>env[i].valueFrom.connectionRef.key</code>.</p> Name Type Description Optional Sensitive ServiceURL string Service URL of the Devant service false false ConsumerKey string Consumer key of the Devant service false false ConsumerSecret string Consumer secret of the Devant service false true TokenURL string Token URL of the STS false false DevantAPIKey string API key of the Devant service false true <p>For more details, see the instructions under the component.yaml file (v1.1) tab.</p> </li> </ol> <p>Note</p> <p>This <code>component.yaml v1.0</code> is a legacy configuration format. For new projects, we recommend using the latest version (v1.1) of <code>component.yaml</code> for improved usability and features.</p> <ol> <li> <p>Copy and paste the snippet from the in-line developer guide into the <code>component.yaml</code> file.</p> <p>The following is a sample snippet:</p> <pre><code>dependencies:\nserviceReferences:\n- name: &lt;SERVICE_NAME&gt;\nconnectionConfig: &lt;CONNECTION_ID&gt;\nenv:\n- from: ServiceURL\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: ConsumerKey\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: ConsumerSecret\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: TokenURL\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: DevantAPIKey\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n</code></pre> Field Description name The name of the service you are connecting to. connectionConfig The unique connection identifier for the connection. env The environment variable mapping. from The key of the configuration entry. to The environment variable name to which Devant will inject the value of the key. </li> <li> <p>Replace <code>&lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;</code> with an appropriate environment variable name of your choice. If you have previously added a service reference section under <code>dependencies</code>, append this as another item under <code>serviceReferences</code>. </p> <p>Upon deploying the component, Devant automatically creates a subscription if applicable and populates the specified environment variables with actual values.</p> <p>The following table provides details on the configuration keys associated with the connection:</p> Name Type Description Optional Sensitive ServiceURL string Service URL of the Devant service false false ConsumerKey string Consumer key of the Devant service false false ConsumerSecret string Consumer secret of the Devant service false true TokenURL string Token URL of the STS false false DevantAPIKey string API key of the Devant service false true </li> </ol> <p></p> <p>Once you add the connection configuration snippet, you can proceed to read those configurations within your application. The steps to follow depend on the programming language you are using.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const serviceURL = process.env.SVC_URL;\n</code></pre> <p>Note</p> <p>This <code>component-config.yaml</code> is a legacy configuration format. For new projects, we recommend using the latest version (v1.1) of <code>component.yaml</code> for improved usability and features.</p> <ol> <li> <p>Copy and paste the snippet from the in-line developer guide into the <code>component-config</code> file under the <code>spec</code> section.</p> <p>The following is a sample snippet:</p> <pre><code>outbound:\nserviceReferences:\n- name: &lt;SERVICE_NAME&gt;\nconnectionConfig: &lt;CONNECTION_ID&gt;\nenv:\n- from: ServiceURL\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: ConsumerKey\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: ConsumerSecret\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: TokenURL\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: DevantAPIKey\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n</code></pre> Field Description name The name of the service you are connecting to. connectionConfig The unique connection identifier for the connection. env The environment variable mapping. from The key of the configuration entry. to The environment variable name to which Devant will inject the value of the key. </li> <li> <p>Replace <code>&lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;</code> with an appropriate environment variable name of your choice. If you have previously added an outbound service reference, append this as another item under <code>serviceReferences</code>. </p> <p>Upon deploying the component, Devant automatically creates a subscription if applicable and populates the specified environment variables with actual values.</p> <p>The following table provides details on the configuration keys associated with the connection:</p> Name Type Description Optional Sensitive ServiceURL string Service URL of the Devant service false false ConsumerKey string Consumer key of the Devant service false false ConsumerSecret string Consumer secret of the Devant service false true TokenURL string Token URL of the STS false false DevantAPIKey string API key of the Devant service false true </li> </ol> <p></p> <p>Once you add the connection configuration snippet, you can proceed to read those configurations within your application. The steps to follow depend on the programming language you are using.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const serviceURL = process.env.SVC_URL;\n</code></pre> <p>If you're using the API key security scheme for the connection, skip Step 3 and follow the instructions in Step 4: API key security scheme tab.</p>"},{"location":"sharing-and-reusing/use-a-connection-in-your-integration/#step-2-read-configurations-within-the-application","title":"Step 2: Read configurations within the application","text":"<p>Once you add the connection configuration snippet, you can proceed to read those configurations within your application. The steps to follow depend on the programming language you are using.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const serviceURL = process.env.Devant_&lt;CONNECTION_NAME&gt;_SERVICEURL;\n</code></pre>"},{"location":"sharing-and-reusing/use-a-connection-in-your-integration/#step-3-acquire-an-oauth-20-access-token","title":"Step 3: Acquire an OAuth 2.0 access token","text":"<p>To consume a Devant service with the visibility level set to organization or public and secured by the OAuth 2.0 security scheme, you must obtain an OAuth 2.0 token from the token endpoint. Subsequently, you can use the token to invoke the service.</p> <ul> <li> <p>For languages with OAuth 2.0-aware HTTP clients, you must pass the OAuth 2.0-related configurations such as client id, client secret and so on, obtained when creating the connection to your HTTP client configuration. The HTTP client autonomously manages token retrieval and refreshing.</p> </li> <li> <p>For languages without OAuth 2.0-aware HTTP clients, you must manually initiate a call to the token endpoint. This includes fetching the token and managing token expiration and refresh directly within your application code. The following is a sample curl command to obtain a token:</p> <pre><code>CONSUMER_KEY=\"your_consumer_key\"\nCONSUMER_SECRET=\"your_consumer_secret\"\nTOKEN_URL=\"your_token_url\"\n# Encode client credentials as Base64\nCLIENT_CREDENTIALS=$(echo -n \"$CLIENT_ID:$CLIENT_SECRET\" | base64)\ncurl -X POST $TOKEN_URL \\\n-H \"Content-Type: application/x-www-form-urlencoded\" \\\n-H \"Authorization: Basic $CLIENT_CREDENTIALS\" \\\n--data-urlencode \"grant_type=client_credentials\"\n</code></pre> </li> </ul>"},{"location":"sharing-and-reusing/use-a-connection-in-your-integration/#step-4-invoke-the-service","title":"Step 4: Invoke the service","text":"<p>Click the tab that matches the security scheme of your service and follow the instructions below:</p> API key security schemeOAuth 2.0 security scheme <p>To invoke the API, use the <code>Devant-api-key</code> header with the API key value retrieved from the corresponding environment variable as described in step 2.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>  const response = await axios.get(serviceURL/{RESOURCE_PATH}, {\nheaders: {\n'Devant-API-Key': `${DevantApiKey}`\n}\n});\n</code></pre> <p>To invoke the service, use the following instructions based on your programming language:</p> <ul> <li> <p>For languages with OAuth 2.0-aware HTTP clients, use the service URL resolved in\u00a0Step\u00a02. The OAuth-aware client manages authentication automatically. For sample requests and responses, see the API definition provided via the Devant marketplace for the service.</p> </li> <li> <p>For languages without OAuth 2.0-aware HTTP clients, use the token obtained in step 3 to make calls to the dependent service. Subsequently, add the obtained token to the HTTP authorization header with the bearer prefix. As the service URL, use the URL resolved in step 2. For sample requests and responses, see the API definition of the service provided via the Devant marketplace.</p> </li> </ul> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const response = await axios.get(serviceURL/{RESOURCE_PATH}, {\nheaders: {\n'Authorization': `Bearer ${accessToken}`\n'Devant-API-Key': `${DevantApiKey}`\n}\n});\n</code></pre> <p>Note</p> <p>If you want to consume a Devant service at the project visibility level, you don't need to obtain a token. You can directly invoke the service using the resolved URL.</p>"},{"location":"sharing-and-reusing/use-a-database-connection-in-your-integration/","title":"Use a Database Connection in Your Integration","text":"<p>Devant allows you to share and reuse Devant-managed databases, accelerating development and enhancing efficiency in building integrated applications through connections.</p> <p>For step-by-step instructions on creating a database connection, see Create a Connection.</p> <p>To learn more about Devant Connections, see the documentation on Connections.</p>"},{"location":"sharing-and-reusing/use-a-database-connection-in-your-integration/#consume-a-database-through-a-connection","title":"Consume a database through a connection","text":"<p>To consume a Devant-managed database via a connection, follow these steps:</p>"},{"location":"sharing-and-reusing/use-a-database-connection-in-your-integration/#step-1-add-connection-configurations","title":"Step 1: Add connection configurations Step 2: Read configurations within the application  Step 2: Read configurations within the application","text":"<p>To integrate a database into your application, click the appropriate tab below based on your current configuration file and follow the step-by-step instructions:</p> Component.yaml file (v1.1)Component.yaml file (v1.0)Component-config.yaml file <ol> <li> <p>Copy and paste the snippet from the  developer guide into the <code>component.yaml</code> file.</p> <p>The following is a sample snippet:</p> <pre><code>dependencies:\nconnectionReferences:\n- name: &lt;CONNECTION_NAME&gt;\nresourceRef: &lt;RESOURCE_IDENTIFIER&gt;\n</code></pre> Field Description name The name given to the connection. resourceRef A unique, readable identifier of the database being connected to. </li> <li> <p>If you've previously added a <code>connectionReferences</code> section under <code>dependencies</code>, append this as another item under <code>connectionReferences</code>. Upon deploying the component, the necessary configurations to establish the connection will be injected into Devant-defined environment variables.</p> <p>The following table details the Devant-defined environment variables:</p> Configuration Key Devant-Defined Environment Variable Name HostName DEVANT_&lt;CONNECTION_NAME&gt;_HOSTNAME Port DEVANT_&lt;CONNECTION_NAME&gt;_PORT Username DEVANT_&lt;CONNECTION_NAME&gt;_USERNAME Password DEVANT_&lt;CONNECTION_NAME&gt;_PASSWORD DatabaseName DEVANT_&lt;CONNECTION_NAME&gt;DATABASENAME <p>If you'd like to use custom environment variable names instead of the Devant-defined ones, add the dependency as a service reference under <code>dependencies</code> in the same file. For more details, refer to the instructions under the <code>component.yaml file (v1.0)</code> tab.</p> <p>The following table provides details on the configuration keys associated with the connection:</p> Name Type Description Optional Sensitive HostName string Hostname of the database server false false Port string Port of the database server false false Username string Username of the database server false false Password string Password of the database server false true DatabaseName string Name of the database false false </li> </ol> <p>Note</p> <p>The <code>component.yaml v1.0</code> file is considered legacy. For new components, we recommend using the latest version, <code>component.yaml v1.1</code>, which offers enhanced usability and features.</p> <ol> <li> <p>Copy and paste the snippet from the  developer guide into the <code>component.yaml</code> file.</p> <p>The following is a sample snippet:</p> <pre><code>dependencies:\nserviceReferences:\n- name: database:&lt;DATABASE_NAME&gt;\nconnectionConfig: &lt;CONNECTION_ID&gt;\nenv:\n- from: HostName\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: Port\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: Username\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: Password\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: DatabaseName\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n</code></pre> Field Description name The name of the database you are connecting to. connectionConfig The unique connection identifier for the connection. env The environment variable mapping. from The key of the configuration entry. to The environment variable name to which Devant will inject the value of the key. </li> <li> <p>Replace <code>&lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;</code> with an appropriate environment variable name of your choice. If you have previously added a service reference section under <code>dependencies</code>, append this as another item under <code>serviceReferences</code>.</p> <p>Upon deploying the component, Devant automatically populates the specified environment variables with actual values.</p> <p>The following table provides details on the configuration keys associated with the connection:</p> Name Type Description Optional Sensitive HostName string Hostname of the database server false false Port string Port of the database server false false Username string Username of the database server false false Password string Password of the database server false true DatabaseName string Name of the database false false </li> </ol> <p></p> <p>Once you add the connection configuration snippet, you can proceed to read those configurations within your application. The steps to follow depend on the programming language you are using.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const hostName = process.env.HOSTNAME;\n</code></pre> <p>Note</p> <p>The <code>component-config.yaml</code> file is considered legacy. For new components, we recommend using the latest version, <code>component.yaml v1.1</code>, which offers enhanced usability and features.</p> <ol> <li> <p>Copy and paste the snippet from the  developer guide into the <code>component-config</code> file under the <code>spec</code> section.</p> <p>The following is a sample snippet:</p> <pre><code>outbound:\nserviceReferences:\n- name: database:&lt;DATABASE_NAME&gt;\nconnectionConfig: &lt;CONNECTION_ID&gt;\nenv:\n- from: HostName\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: Port\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: Username\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: Password\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: DatabaseName\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n</code></pre> Field Description name The name of the database you are connecting to. connectionConfig The unique connection identifier for the connection. env The environment variable mapping. from The key of the configuration entry. to The environment variable name to which Devant will inject the value of the key. </li> <li> <p>Replace <code>&lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;</code> with an appropriate environment variable name of your choice. If you have previously added an outbound service reference, append this as another item under <code>serviceReferences</code>.</p> <p>Upon deploying the component, Devant automatically populates the specified environment variables with actual values.</p> <p>The following table provides details on the configuration keys associated with the connection:</p> Name Type Description Optional Sensitive HostName string Hostname of the database server false false Port string Port of the database server false false Username string Username of the database server false false Password string Password of the database server false true DatabaseName string Name of the database false false </li> </ol> <p></p> <p>Once you add the connection configuration snippet, you can proceed to read those configurations within your application. The steps to follow depend on the programming language you are using.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const hostName = process.env.HOSTNAME;\n</code></pre>"},{"location":"sharing-and-reusing/use-a-database-connection-in-your-integration/#step-2-read-configurations-within-the-application","title":"Step 2: Read configurations within the application","text":"<p>Once you add the connection configuration snippet, you can proceed to read those configurations within your application. The steps to follow depend on the programming language you are using.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const hostName = process.env.DEVANT_&lt;CONNECTION_NAME&gt;_HOSTNAME;\n</code></pre>"},{"location":"sharing-and-reusing/use-a-database-connection-in-your-integration/#step-3-initiate-a-database-connection","title":"Step 3: Initiate a database connection","text":"<p>To initiate a connection to the database, follow these steps:</p> <p>In this example, you will connect to a MySQL database.</p> Step 3.1: Install the required packages <p>For the MySQL database, install the <code>mysql2</code> package using npm:</p> <pre><code>// Install the mysql2 package\nnpm install mysql2\n</code></pre> Step 3.2: Import required packages <pre><code>const client = require('mysql2')\n</code></pre> Step 3.3: Establish a connection <p>To establish the connection, use the environment variables for <code>hostName</code>, <code>username</code>, <code>password</code>, <code>databaseName</code>, and <code>port</code> as follows:</p> <pre><code>var connection = client.createConnection({\nhost: hostName,\nuser: username,\npassword: password,\ndatabase: databaseName,\nport: port\n});\nconnection.connect((err) =&gt; {\nif (err) {\nreturn;\n}\n// Connection is successful\n});\n</code></pre> <p>By following these steps, your component can interact with the Devant-managed database seamlessly.</p>"}]}